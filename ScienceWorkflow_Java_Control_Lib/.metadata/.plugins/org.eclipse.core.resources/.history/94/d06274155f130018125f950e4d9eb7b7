package tests;

import static org.junit.Assert.*;

import java.math.BigInteger;
import java.util.Collection;

import org.junit.Test;

import scicoms.RingBuffer;
import scicoms.Robot;
import scicoms.SampleType;
import scicoms.Sensor;
import scicoms.SensorSample;

public class UnitTests {

	private static final String IP = "127.0.0.1";
	private static final int PORT = 9090;
	
	@Test
	public void ringBufferTest1() {
		RingBuffer<Integer> buff = new RingBuffer<Integer>(100);
		
		for(int i = 0; i < 100; i++){
			buff.add(i);
		}
		
		Integer compTo = 0;
		for(Integer i : buff.getData()){
			assertEquals(compTo, i);
			compTo++;
		}
	}
	
	@Test
	public void ringBufferTest2() {
		RingBuffer<Integer> buff = new RingBuffer<Integer>(100);
		
		for(int i = 0; i < 100; i++){
			buff.add(i);
		}
		
		Integer compTo = 0;
		for(Integer i : buff.getData()){
			assertEquals(compTo, i);
			compTo++;
		}
		
		buff.add(69);
		
		compTo = 1;
		for(Integer i : buff.getData()){
			assertEquals(compTo, i);
			
			if(compTo == 99)
				compTo = 69;
			else
				compTo++;
		}
	}
	
	@Test
	public void sampleTypeTest1(){
		SampleType t = new SampleType("ushort");
		assertTrue(t.parse("0") instanceof Integer);
	}

	@Test
	public void sampleTypeTest2(){
		SampleType t = new SampleType("short");
		assertTrue(t.parse("0") instanceof Short);
	}
	
	@Test
	public void sampleTypeTest3(){
		SampleType t = new SampleType("uint");
		assertTrue(t.parse("0") instanceof Long);
	}
	
	@Test
	public void sampleTypeTest4(){
		SampleType t = new SampleType("int");
		assertTrue(t.parse("0") instanceof Integer);
	}
	
	@Test
	public void sampleTypeTest5(){
		SampleType t = new SampleType("short");
		assertTrue(t.parse("0") instanceof Short);
	}
	
	@Test
	public void sampleTypeTest6(){
		SampleType t = new SampleType("ulong");
		assertTrue(t.parse("0") instanceof BigInteger);
	}
	
	@Test
	public void sampleTypeTest7(){
		SampleType t = new SampleType("long");
		assertTrue(t.parse("0") instanceof Long);
	}
	
	@Test
	public void sampleTypeTest8(){
		SampleType t = new SampleType("int int int");
		assertTrue(t.parse("0 0 0") instanceof Collection);
	}
	
	@Test
	public void sampleTypeTest9(){
		SampleType t = new SampleType("int uint double");
		assertTrue(t.parse("0 0 0") instanceof Collection);
		
		@SuppressWarnings("unchecked")
		Collection<Object> coll = (Collection<Object>) t.parse("0 0 0");
		assertTrue(coll.toArray()[0] instanceof Integer);
		assertTrue(coll.toArray()[1] instanceof Long);
		assertTrue(coll.toArray()[2] instanceof Double);
	}
	
	@Test
	public void sensorSampleTest1(){
		SensorSample smp = new SensorSample(new SampleType("int"), "6969");
		assertTrue(smp.getValue() instanceof Integer);
		assertEquals(6969, (int)smp.getValue());
	}
	
	@Test
	public void sensorSampleTest2(){
		SensorSample smp = new SensorSample(new SampleType("int uint ulong"), "-6969 6969 4206969");
		assertTrue(smp.getValue() instanceof Collection);
		
		Collection<Object> coll = (Collection<Object>) smp.getValue();
		Object[] arr = coll.toArray();
		
		assertEquals(-6969, (int)arr[0]);
		assertEquals(6969, (long)arr[1]);
		assertEquals(BigInteger.valueOf(4206969), (BigInteger)arr[2]);
	}
	
	@Test
	public void sensorTest1(){
		Sensor s = new Sensor("accelorometer 0 ushort", 10);
		assertEquals("accelorometer", s.getName());
		assertEquals(0, s.getId());
		assertTrue(s.getDataType().parse("0") instanceof Integer);
	}
	
	@Test
	public void sensorTest2(){
		Sensor s = new Sensor("accelorometer 0 ushort", 10);
		
		s.addSample("420");
		
		assertEquals(new SensorSample(new SampleType("ushort"), "420"), s.getMostRecent());
	}
	
	@Test
	public void sensorTest3(){
		Sensor s = new Sensor("accelorometer 0 int", 2048);
		
		for(int i = 0; i < 2048; i++){
			s.addSample(Integer.toString(i));
		}
		
		Integer compTo = 0;
		for(SensorSample smp : s.getHistory()){
			assertEquals(compTo, smp.getValue());
			compTo++;
		}
	}
	
	@Test
	public void sensorTest4(){
		Sensor s = new Sensor("accelorometer 0 int", 2048);
		
		for(int i = 0; i < 4096; i++){
			s.addSample(Integer.toString(i));
		}
		
		Integer compTo = 2048;
		for(SensorSample smp : s.getHistory()){
			assertEquals(compTo, smp.getValue());
			compTo++;
		}
	}
	
	@Test
	public void robotTest1(){
		Robot r = new Robot(IP, PORT, 100, 4096);
		int i = 1;
		while(r.rcvPending()){
			i++;
			if(i == 0)
				break;
		}
		
		r.drive(0, 0);
	}
}
